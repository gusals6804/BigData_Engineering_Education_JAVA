package Pack01;

import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class server extends Application{

	ExecutorService executorService;
	ServerSocket serverSocket;
	LinkedList<Client> connections = new LinkedList<Client>();

	void start(){
		System.out.println(10);
		executorService = Executors.newFixedThreadPool(
				Runtime.getRuntime().availableProcessors()
		);
		try {
			
			serverSocket = new ServerSocket();
			InetAddress address = InetAddress.getLocalHost();
			System.out.println(address);
			
			serverSocket.bind(new InetSocketAddress(address, 5700));
		} catch (Exception e) {
			if(!serverSocket.isClosed()) {
				stops();
			}
			return;
		}

		Runnable runnable = new Runnable() {

			@Override
			public void run() {
				Platform.runLater(()->{
					displayText("서버 시작");
					//btn.setText("stop");
				});

				while(true) {
					try {
						System.out.println(33);
						Socket socket = serverSocket.accept();
						System.out.println(34);
						Platform.runLater(()->{
						});

						Client client = new Client(socket);
						connections.add(client);
					} catch (Exception e) {
						if(!serverSocket.isClosed()) {
							stops();
						}
						break;
					}
				}
			}
		};
		executorService.submit(runnable);
	}

	void stops() {
		try {
			Iterator<Client> iterator = connections.iterator();
			while(iterator.hasNext()) {
				Client client = iterator.next();
				client.socket.close();
				iterator.remove();
			}
			if(serverSocket!=null && !serverSocket.isClosed()) {
				serverSocket.close();
			}
			if(executorService!=null && !executorService.isShutdown()) {
				executorService.shutdown();
			}
			Platform.runLater(()->{
				displayText("서버 멈춤");
				btn.setText("start");
			});
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	class Client{

		Socket socket;

		Client(Socket socket){
			this.socket = socket;
			receive();
		}

		void receive() {
			Runnable runnable = new Runnable() {
				@Override
				public void run() {
					try {
						while(true) {
							byte[] byteArr = new byte[100];
							InputStream inputStream = socket.getInputStream();
							int readByteCount = inputStream.read(byteArr);
							String data = new String(byteArr, 0, readByteCount, "UTF-8");
							for(Client client : connections) {
								client.send(data);
							}
						}
					} catch (Exception e) {
					}
				}
			};
			executorService.submit(runnable);
		}

		void send(String data) {
			Runnable runnable = new Runnable() {
				@Override
				public void run() {

					try {
						byte[] byteArr = data.getBytes("UTF-8");
						OutputStream outputStream = socket.getOutputStream();
						outputStream.write(byteArr);
						outputStream.flush();
					} catch (Exception e) {
					}
				}
			};
			executorService.submit(runnable);
		}
	}


	TextArea txtDisplay;
	Button btn;

	@Override
	public void start(Stage primaryStage) throws Exception {

		// 창 설정 하기 
		VBox root = new VBox();
		root.setPrefSize(400, 300); // 창의 크기 

		// 버튼 달기
		btn = new Button("start");
		btn.setOnAction(e->{
			if(btn.getText().equals("start")) {
				start();
			} else if(btn.getText().equals("stop")){
				stops();
			}
		});


		// 채팅 창에 엔터를 치면 된다.
		txtDisplay = new TextArea();
		txtDisplay.setEditable(false);

		root.getChildren().addAll(btn,txtDisplay);

		//
		Scene scene = new Scene(root);
		primaryStage.setScene(scene);

		System.out.println(2);
		primaryStage.setTitle("서버");
		primaryStage.show();
		System.out.println(3);


	}

	void displayText(String text) {
		txtDisplay.appendText(text+"\n");
	}

	public static void main(String[] args) {
		System.out.println(1);
		launch(); // 런처 함수는 스타트 함수를 콜 한다.
		System.out.println(4);
	}

}

