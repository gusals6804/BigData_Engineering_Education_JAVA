1교시
/*---------------------------------------------*/
// 생성자가 없으면 컴파일러가 직접 생성자를 만든다.
// 생성자가 없어도 함수 1번이 콜 된다.
// 디폴트 생성자
// 생성자는 무조건 하나 만드는 것이 좋다.

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Tiger{
	int a, b, c;

// 생성자 삭제
	
	void func01() {
		System.out.println("함수 1번 콜");
	}
			
}

public class Hello {

	public static void main(String[] args) {

		Tiger a = new Tiger();
		a.func01();

	}
}

/*---------------------------------------------*/
// 생성자를 만들면 컴퓨터는 생성자를 만들지 않는다.
// 생성자에 인수 전달 하면 인수가 필요하고
   인수 전달을 하지 않으면 인수가 없어야 한다.

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Tiger{
	int a, b, c;
	Tiger(){
		
	} // 인수 없음
	
	Tiger(int num){
		
	} // 인수 전달
	
	void func01() {
		System.out.println("함수 1번 콜");
	}
	
}

public class Hello {

	public static void main(String[] args) {

		Tiger t1 = new Tiger(); // 인수 없음
		Tiger t2 = new Tiger(50); // 인수 필요
		
		t1.func01();

	}
}

/*---------------------------------------------*/
// 상속
// 기존의 클래스에 추가적인 기능을 위해 클래스를 추가 하는 것
// 자식 클래스가 부모 클래스를 선택
// extends
// super

package PACK01;

import java.util.Random;
import java.util.Scanner;

// 부모 클래스
class Tiger{
	int a, b, c;
	Tiger(){
//		System.out.println("호랑이 콜");
	}
	
	void func01() {
		System.out.println("함수 1번 콜");
	}
	
	void func03() {
		System.out.println("부모의 함수 3번 콜");
	}
}

class Lion extends Tiger{ // 상속하는 방법 extends 사용
	int a, b, c;
	Lion(){
//		System.out.println("사자 콜");
	}

	void func02() {
		System.out.println("자식의 함수 2번 콜");
	}

	void func03() {
		System.out.println("자식의 함수 3번 콜");
	}
	
	void func04() {
		super.func03(); // 부모 클래스의 함수 3번 호출
	}
}

public class Hello {

	public static void main(String[] args) {

//		Tiger t1 = new Tiger(); 
//		t1.func01();
		
		Lion l1 = new Lion();
		l1.func01();
		l1.func02();
		l1.func03(); // 직접적으로 부모의 함수 3변을 사용할 수 없다.
		l1.func04(); // 간접적으로 거쳐서 사용
		
	}
}

/*---------------------------------------------*/
2교시
// super();가 생략 되어있다.
// 원하는 생성자를 쓰기 위해서 supur(); 사용
// 반드시 첫 줄에 사용한다.

package PACK01;

import java.util.Random;
import java.util.Scanner;

// 부모 클래스
class Animal{
	int a, b, c;
	Animal(){
		super();
		System.out.println("부모 생성자 콜");
	}	
	Animal(int a){
		System.out.println("부모 생성자 콜"+a);
	}
	Animal(int a, int b){
		System.out.println("부모 생성자 콜"+a+" "+b);
	}
}

class Tiger extends Animal { //extends 뒤에 부모 클래스
	int a, b, c;
	Tiger(){
// 부모 생성자를 콜
// 생성자를 골라서 쓰기 위해서		
// 인수를 받으면 인수를 받는 생성자를 사용한다.		
		super(100); // 이것은 적으나 안적으나 디폴트 되어있다.
		System.out.println("자식 생성자 콜");
	}
// super(); 가 생략 되면 기본 생성자만 출력
	Tiger(int a){
// super를 사용하여 인수를 두개 받는 부모 생성자를 받아온다.		
		super(300,400);
		System.out.println("자식 생성자 콜"+a);
	}
}

public class Hello {

	public static void main(String[] args) {
 
// 자식 클래스부터 갔다가 부모 클래스를 본다.
// 자식 클래스부터 가지만 super가 생략되어 있어서 부모 생성자가 먼저 나온다.
// 객체 생성을 통해 원하는 자식 생성자를 만들 수 있다.		
		Tiger t1 = new Tiger(200); // 부모 생성자까지 출력
		System.out.println("------------------");
		Tiger t2 = new Tiger();
	}
}

/*---------------------------------------------*/
3교시
// 오버라이딩
// final

package PACK01;

import java.util.Random;
import java.util.Scanner;

// 부모 클래스
// final을 쓰면 상속이 되지 않는다.
final class Animal{
	int a, b, c;
	Animal(){
		System.out.println("부모 생성자 콜");
	}
	
	void func01() {
		System.out.println("부모 함수 1번 콜");
		func02();
		func03();
	}

// 오버라이딩
// 자식 때문에 부모 함수가 가려졌다.
// 자식의 함수와 동일한 것이 있으면 희미하게 사라진다.
// final을 쓰면 오버라이딩이 되지 않는다.	
	final void func02() {
		System.out.println("부모 함수 2번 콜");
	}

	void func03() {
		System.out.println("부모 함수 3번 콜");		
	}

}

class Tiger extends Animal { //extends 뒤에 부모 클래스
	int a, b, c;
	Tiger(){
		System.out.println("자식 생성자 콜");
	}	
	
	void func02() {
		System.out.println("자식의 함수 2번 콜");
	}
	
	void func03() {
		super.func03();
		System.out.println("자식의 함수 3번 콜");
	}
}

public class Hello {

	public static void main(String[] args) {
 
		Tiger t1 = new Tiger(); 
		t1.func01();

	}
}

/*---------------------------------------------*/
// 여러번 이어서 쓸 수 있다.

package PACK01;

import java.util.Random;
import java.util.Scanner;

class A{
	
}

class B extends A{
	
}

class C extends A{
	
}

class D extends C{
	
}

class E extends D{
	
}

public class Hello {

	public static void main(String[] args) {
 
		StringBuffer a;
		
	}
}

/*---------------------------------------------*/

// 다형성

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Fruit{	
	void eat() {
		System.out.println("먹습니다.");
	}	

	void Make() {
		System.out.println("과일을 만듭니다.");
	}
	
}

class Apple extends Fruit{	
	void eat() {
		System.out.println("사과를 먹습니다.");
	}
	
	void Show() {
		System.out.println("사과를 보여줍니다.");
	}
}

class Banana extends Fruit{
	void eat() {
		System.out.println("바나나를 먹습니다.");
	}	
}

class Orange extends Fruit{	
	void eat() {
		System.out.println("오렌지를 먹습니다.");
	}	
}

class Kiwi extends Fruit{	
	void eat() {
		System.out.println("키위를 먹습니다.");
	}	
}

class Store{
/*	void sell(Apple a) {
		a.eat();
	}

	void sell(Banana a) {
		a.eat();
	}

	void sell(Orange a) {
		a.eat();
	}*/

// 다형성을 이용하여 한 번에 작성할 수 있다.
	void sell(Fruit a) {
		a.eat();
	}
}

public class Hello {

	public static void main(String[] args) {

		Apple a1 = new Apple();
		Banana b1 = new Banana();
		Orange o1 = new Orange();
		
/*		a1.eat();
		b1.eat();
		o1.eat();
		
		Fruit f1 = new Apple(); // 부자관계 - 다형성
		f1.eat(); // a1.eat(); 와 결과가 동일하다.
		
		f1.Make();
//		f1.Show(); // 오버라이딩 된 것만 사용할 수 있다.
		
		Fruit f2 = new Banana();
		f2.eat();

		Fruit f3 = new Orange();
		f3.eat();*/
		
		Store s1 = new Store();
/*		s1.sell(a1);
		s1.sell(b1);
		s1.sell(o1);*/
		
		s1.sell(new Apple());
		s1.sell(new Banana());
		s1.sell(new Orange());
		s1.sell(new Kiwi());
			
	}
}

/*---------------------------------------------*/
// 다형성 예제

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Animal{
	void cry() {
		System.out.println("저는 소리를 내지 못해요.");
	}
}

class Dog extends Animal{
	void cry() {
		System.out.println("멍멍");
	}	
}

class Cat extends Animal{
	void cry() {
		System.out.println("야옹");
	}	
}

class Snake extends Animal{
	
}

class Tiger extends Animal{
	void cry() {
		System.out.println("어흥");
	}
}

class Rabbit extends Animal{
}

// 클래스가 아무리 많이 생겨도 Zoo 클래스는 변함이 없다.
class Zoo{
	void cry(Animal a) {
		a.cry();
	}
}


public class Hello {

	public static void main(String[] args) {

		Zoo z = new Zoo();
		z.cry(new Dog());
		z.cry(new Cat());
		z.cry(new Snake());
		z.cry(new Tiger());
		z.cry(new Rabbit());
			
	}
}

/*---------------------------------------------*/

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Tiger {
	int num;
	void func01() {
		for (int i = 0; i < num; i++) {
			System.out.println("함수 1번 콜");			
		}
	}
}

public class Hello {

	public static void main(String[] args) {

		int[] ar = new int[3];
		ar[0] = 10;
		ar[1] = 20;
		ar[2] = 30;
		for (int i : ar) {
			System.out.println(i);
		}	
		
		Tiger t1 = new Tiger();
		
		// 객체는 이렇게 사용해야 한다.
		// new를 사용해야 한다.
		Tiger[] t2 = new Tiger[3];
		t2[0] = new Tiger();
		t2[1] = new Tiger();
		t2[2] = new Tiger();
		
/*		t2[0].func01();
		t2[1].func01();
		t2[2].func01();*/
		
		//for문을 사용할 수 있다.
		
		// 원하는 만큼 사용할 수 있다.
		t2[0].num = 3;
		t2[1].num = 4;
		t2[2].num = 5;
		
		for (int i = 0; i < t2.length; i++) {
			t2[i].func01();
			System.out.println("----------------");
		}
	
	}
}

/*---------------------------------------------*/
// 다형성 예제

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Animal{
	void cry() {
		
	}
}

class Tiger extends Animal{
	void cry() {
		System.out.println("어흥");
	}	
}

class Dog extends Animal{	
	void cry() {
		System.out.println("왈왈");
	}
}

class Cat extends Animal{
	void cry() {
		System.out.println("야옹");
	}
}

public class Hello {

	public static void main(String[] args) {

		Animal[] animal = new Animal[3];
		
		// 다형성이 되었다.
		animal[0] = new Tiger();
		animal[1] = new Dog();
		animal[2] = new Cat();	

		for (int i = 0; i < 10; i++) {
			int rn = (new Random()).nextInt(3);
			System.out.println(rn);
			animal[rn].cry();
		}

	}
}

/*---------------------------------------------*/


