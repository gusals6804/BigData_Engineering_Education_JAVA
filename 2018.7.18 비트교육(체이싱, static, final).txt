/*---------------------------------------------*/
//함수 생성과 리턴 값 사용 4가지 조합

class Tiger{
	int a, b, c;
	Tiger(){
		System.out.println("생성자 콜");
	}

	void func01() {
		System.out.println("코끼리");
	}
	
	void func02(int a) {
		System.out.println("호랑이");
	}
	
	int func03() {
		System.out.println("앵무새");
		return 10;
	}
	
	int func04(int c, int d) {
		System.out.println("비둘기");
		return 100;
	}
	
		void func05(String s) {
		System.out.println(s);
	}

}

//출력

		Tiger t1 = new Tiger();
		
		t1.func01();
		t1.func02(3);

//리턴 값 사용
		System.out.println(t1.func03());
		System.out.println(t1.func04(3, 4));

// 인수 전달은 대입 연산자가 생략
// String s = "낙타", String s = new String("비둘기")

		t1.func05("낙타");
		t1.func05(new String("비둘기"));

/*---------------------------------------------*/
//클래스 두개 생성

package PACK01;

import java.util.Random;
import java.util.Scanner;
class Apple{
	int a, b, c;
	Apple(){
		System.out.println("Apple 콜");
	}
	
	void func01() {
		System.out.println("Apple의 함수 1");
	}
}

class Tiger{
	int a, b, c;
	Tiger(){

		System.out.println("Tiger 콜");
	}
	
	void func01() {

		System.out.println("코끼리");
	}
	
	void func02(int a) {

		System.out.println("호랑이");
	}
	
	int func03() {
		System.out.println("앵무새");
		return 10;
	}
	
	int func04(int a, int b) {
		System.out.println("비둘기");
		return a+b;
	}
	
	void func05(String s) {
		System.out.println(s);
	}
	
	void func06(Apple aa) {
		System.out.println("소나무");
		func01(); // 함수 1번 콜
		aa.func01(); // 다른 클래스의 함수를 쓴다.
	}
	
}

public class Hello {

	public static void main(String[] args) {

		Apple a1 = new Apple();
		Tiger t1 = new Tiger();
		System.out.println("---------------------");
		
//		t1.func01();
//		t1.func02(3);

//리턴 값 사용
//		System.out.println(t1.func03());
//		System.out.println(t1.func04(3, 4));
		
// 인수 전달은 대입 연산자가 생략
// String s = "낙타", String s = new String("비둘기")

//		t1.func05("낙타");
//		t1.func05(new String("비둘기"));
		
//		t1.func06(new int()); // 안되는 문법
//		토끼 s = new 토끼(); 이렇게 사용 하자.		
		
		t1.func06(new Apple());
		System.out.println("---------------------");
		t1.func06(a1); // 이렇게 해도 된다.
		
//		a1.func01();
		
	}
}

/*---------------------------------------------*/

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Apple{
	int a, b, c;
	Apple(){
		System.out.println("Apple 콜");
	}			

	void func01() {
		System.out.println("맛있는 사과를");
	}
}

class Banana{
	int a, b, c;
	Banana(){
		System.out.println("Banana 콜");
	}			
	
	void func01() {
		System.out.println("맛있는 바나나를");
	}
}

class Orange{
	int a, b, c;
	Orange(){
		System.out.println("Orange 콜");
	}			
	
	void func01() {
		System.out.println("맛있는 오렌지를");
	}
}

class Tiger{
	int a, b, c;
	Tiger(){
		System.out.println("Tiger 콜");
	}			
	
	void func01(Apple mirae) {
		System.out.println("호랑이가");
		mirae.func01();
		System.out.println("먹습니다");
	}

	void func02(Banana mirae) {
		System.out.println("호랑이 새끼가");
		mirae.func01();
		System.out.println("먹습니다");
	}

	void func03(Orange mirae) {
		System.out.println("호랑이 엄마가");
		mirae.func01();
		System.out.println("먹습니다");
	}
	
}

public class Hello {

	public static void main(String[] args) {

		Apple a = new Apple();
		Banana b = new Banana();
		Orange o = new Orange();
		Tiger t = new Tiger();
		
		System.out.println();
		
		t.func01(a);
		System.out.println();
		
		t.func02(b);
		System.out.println();
		
		t.func03(o);
		
	}
}

/*---------------------------------------------*/
//체이싱

package PACK01;

import java.util.Random;
import java.util.Scanner;

class Apple{
	int a, b, c;
	Apple(){
		System.out.println("Apple 콜");
	}
	
	void func01() {
		System.out.println("호랑이");
	}

	void func02() {
		System.out.println("코끼리");
	}

	void func03() {
		System.out.println("앵무새");
	}

// 같은 타입으로 받아야 한다.
	int func04() {
		int a = 100;
		return a;
	}
	
	String func05() {
		String s = "낙타";
		return s;
	}
	
// Apple 타입인 나를 리턴한다.
	Apple func06() {
		System.out.println("나는 6번");
		return this;
	}

	Apple func07() {
		System.out.println("나는 7번");
		return this;
	}
	
	Apple func08() {
		System.out.println("나는 8번");
		return this;
	}
	
	
}

public class Hello {

	public static void main(String[] args) {

		Apple a = new Apple();

		int t1 = a.func04();
		System.out.println(t1);
		
		String t2 = a.func05();
		System.out.println(t2);
		
		// t3를 Apple에 있는 함수 다 사용 가능
/*		Apple t3 = a.func06();
		t3.func01();
		t3.func02();
		t3.func03();
		System.out.println(t3.func04());
		System.out.println(t3.func05());*/
		
		// this. 함수에 이어서 쓸 수 있다.
/*		a.func06();
		a.func06().func01();;
		a.func06().func02();;
		a.func06().func03();;*/
		
		// .을 이용해서 계속 콜한다.
		// "체이닝" 이라고 한다.
		a.func06().func07().func06().func08().func01();
		
		// 이렇게 같이 쓴다.
		(new Apple()).func01();
		(new Random()).nextInt(100);
		
	}
}

/*---------------------------------------------*/
//static, final

package PACK01;

import java.util.Random;
import java.util.Scanner;

final class Apple{
	int a, b, c;
	int n1; // = 10; 
	
// static을 사용하면 이 변수만 실체가 생긴다.
// n2는 존재한다.
// 객체를 생성하지 않고 클래스 함수를 통해 바로 사용하기 위해서
// static 변수는 초기값을 넣어준다.	
	static int n2 = 20;

// final
// 변수 앞에 붙일 수 있다.
// class 앞에 붙일 수 있다.
// 함수 void 앞에 붙일 수 있다.
// 값을 대입 받는 것이 마지막이다.
	final int n3 = 30;
	final int month = 12; // 고정시키기 위해서 사용
	final static int n4 = 40;
	
	Apple(){
		System.out.println("Apple 콜");
	}
	
	final void func01() {
		System.out.println("함수 1번 콜");
		n1 = 100;
		n2 = 200;
	}
	
	static void func02() {
		System.out.println("함수 2번 콜");
//		n1 = 300; // 에러 // static함수 안에서는 static변수만 사용
		n2 = 400;
	}

}

public class Hello {

	public static void main(String[] args) {

//		Apple a = new Apple();
		
		//직접 쓸 수 있다.
		System.out.println(Apple.n2);
		Apple.n2 = 30;
		System.out.println(Apple.n2);

//		a.func01();
		
		// 바로 사용할 수 있다.
		Apple.func02();
		
//		Math n = new Math(); // 객체 생성을 막아놨다.
		Math.abs(10); // abs는 절대 값
		Math.abs(-10);
		
		System.out.println(Math.abs(10));
		System.out.println(Math.abs(-10));
		
		int a = Math.abs(10);
		int b = Math.abs(-10);
		System.out.println(a);
		System.out.println(b);
	
		System.out.println(Math.max(10, 20));
		
		Apple aa = new Apple();
//		aa.n3 = 50;// final 때문에 쓸 수 없다.
// final은 변수를 상수화 한다.		
		
		System.out.println(Apple.n4);
//		Apple.n4 = 100; // 대입은 안된다.
		
	}
}

/*---------------------------------------------*/










